SketchIndex.txt as of 191025

2waySerial for mega -- to program BT module w/ AT cmd from Ardu IDE
  or Ser2 can be wired to USB-TTL dongle for I/O w/ Proc to test
  serial protocol: key or var in Proc sent variously, see how
  displayed in Ardu ser. mon. or used in sketch; ideas here used in
  ServoMega TxRx Serial and BT, Proc SerStringReadBT
 
  Uses: serial.write, read, print, TimedAction lib for repeats w/o 
  blocking, Serial.flush, readBytes
  
ADXL345-FRCada 
      adapted from Adafruit's _345 code for FRC accel breakout board to display 3 axis accel-
      erometer values (tilt).
      Uses: I2C, Wire lib, Adafruit unified lib, switch/case
      
ADXL345_FRCrow
    demo of I2C device (I2Cdev) and ADXL345 accelerometer classes by Rowberg, adapted for
    FRC board by AM. Read 3 axis accel values over I2C.
    Uses: I2C, Wire, I2Cdev, ADXL345 lib, anal pins to power device
    
ADXL345_test
    simple test to read single register from FRC accelerometer using I2C
    Just uses Wire lib & its basic commands: I2C, Wire, anal pins to power device
    
ADXL345_test2
    ADXL345_test2 (to read single register from accelerometer) amended to scan 0-127 for 
    address of active device, then get its ID from reg 0x00
    Uses: I2C, Wire
    
AnalInputMap2ToneA-B-C
 input analog voltage, from pot or sonar, map to useful values, activate toner using beep
 rate and frequency to indicate distance (inversely); when target distance reached, stop tone and
 turn on a light; set adjacent analog pins (gnd, 5v, signal) to 0 and 5 v to power pot or US device
 mod A worked fine but long delays make loop execute very slowly when AR big;
 mod B uses timed event method to eliminate loop delays; much more complex logic, and tone 
 quality suffers from beat frequency I guess
 mod C uses timedAction lib to make beeps run in their own thread so loop rate not affected; tone 
 quality is fine, and I can modulate beep rate in loop, and freq by setting it in beep().
 
 Uses (A,B,C): analogRead, tone, timing events w/ millis, print w/ String concat, sane print @ 
 count interval, TimedAction lib, map, constrain variable

AnalogReadSerial
      Reads an analog input on pin A4, prints the result to the serial monitor
      Uses: AnalogRead

AnalogReadFltoString -- mod above and below to show use of String object for better printing
    and print a float, which normally it won't accept. String can use printf like Java/C (not here).
    Uses: String object, cast from int to float, dtostrf to convert float to string then to String

AnalogReadSerialString -- first mod shows use of String obj for better printing, has no 
   float capacity;  Reads an analog input on pin A_, prints the result to the serial monitor.
   Attach the center pin of a potentiometer to pin A_, and the outside pins to +5V and ground.
   Uses: exit, String construct from int, analogRead, String concatenation

AnalogReadSerialPrintBT -- Reads an analog input on pin A_, prints the result to the serial 
  monitor and second serial for transmit over BT (Simblee et al) or other.
  Attach the center pin of a pot to pin A5, and pwr pins to +5V & gnd.

  Uses: Software Serial, cast of int to String

  Can test serial#2 I/O by connecting rx and tx of USB-TTL dongle to
  second serial pins and connecting Ser Mon to that port
  
AT Comm Set HC05 -- related to HC05 bluetooth board, somehow

Atmega chip fuse detect -- sketch on master Ardu when programming another, can't remember why

Atmega Chip Programmer -- Gammon sketch, program bootloader from one Ardu to another?

BinaryDisplay -- experiment to read number, display binary w/ LEDs
    Uses bitRead of a binary number to turn lite on if bit is 1
    
BinaryDisplayFromInput -- experiment to read number from BCD switch or other, &
   display in binary lites; could give option of getting random # or converting a serial 
   or switch input to binary, etc
   Uses: bitRead, bitWrite, 3 bit BCD switch, output to 4 LEDs
    
CharAnalTest -- character analysis operators 
   Send any byte and the sketch will tell you about it:
   Uses: the character analysis operators, isAlpha, isDigit, isControl, isPrintable, isSpace...

DemoReel_X and X2
// Mod of FastLED example DemoReel100: various animated patterns using FastLED built-ins
// Uses: FastLED lib, rotating patterns, black out some, X2 added more randomness

DigitalReadSerialOut
    Reads a digital input on pin 2, prints the result to the serial monitor 
    Uses INPUT_PULLUP, aka digitalWrite(x, HIGH), digitalRead

DigitRead2StringOut
 read a bunch of binary buttons, convert to string of 0/1's, output to Serial

ESPwf -- WiFiEsp example: UdpNTPClient -- various tests of wifiESP w/ shields
  mod by AM to use 2 serial channels of MEGA and display to LCD. all
  wifiESP code is for Ardu with ESP shield attached
  setup: ESP shield gets pwr from Ardu, its TX,RX wired to Mega Ser2 pins
  w/ shield RX input level shifted w/ voltage divider
  Gets the time from a Network Time Protocol (NTP) server.
  Demonstrates use of UDP to send and receive data packets
  
ESPrimUDP GPS time (stub) aka
   Tardis Time Server by: M. Ray Burnette 20150910 -- code for programming primary
    ESP board in Ardu IDE; orig got time from GPS, sends over wifi, this seems like test
    stub, no GPS input, etc; may work to test various I/O. More code in TardisTimeServ.ino
    
   Create a private 10. network and capture all DNS requests to the Tardis Time server
   Respond to both UDP and HTML requests
   
ESP primary UDP, send/recv UDP data
  from https://thearduinoandme.wordpress.com/tutorials/esp8266-send-receive-binary-data/
  load to primary ESP board -- uses Serial() to comm with PC hosting the ESP board, view
   tx/rx messages that it sends and gets from Processing app over wifi, on same or other
   PC; works as modif with Feather-Huzz, turns LED on/off in response to incoming message

ESP82 shield Uno Mega serial and UDP various comm tests to receive / send
  data & control to/from Proc on PC over serial and wifi-UDP. Proc sketches called
  Serial data read graph and UDP Mega ... things, v.i. Ardu sketches sending US
  data called USsr04 avg LCD Ser / UDP ... or mega w/ ESP shield
  
ESP82 shield mega UDP tx rx --  Mega w/ ESP shield, send / recv bytes
   over wifi UDP to prog like Proc on PC, also view Ardu's I/O w/ ser. mon.
   mod from UDPsendreceive in wifiESP examples

  [US data on Ardu--> wifi shield sends UDP--> wifi AP (can be on PC)-->]
  Proc running UDP lib --> sends control bytes to Ardu for servo; first got
  a byte for up/down and increment tilt var; this adds getting an int
  from a slider from UDP on Proc, or joystick button up/down control

  Uses: udp read /.write bytes, Ser2 to shield, servo.write, convert
  incoming data to int angle for servo, elapsedMillis for timed print
  
  
FastBlink --  FastLED blink example mod for 2 lites

FastLEDemo_shortY
// Mod of DemoReel100 example: various animated patterns using FastLED built-ins
//  mod to make Y, more random pattern shift

FastLEDWaveTrainA-B-C-D
	 Flash 2 neopixel LEDs at various brain wave entraining frequencies
	 and colors; brightness adjusts with pot, A codes one freq/color
	 B adds mode input switch to vary freq/color; C simplified code, adds
	 train+pulse option; D adds slowdown mode option

	Wiring: BCD switch to D2,3,4; LED's to D9,10,11; 2 LEDs power from board gnd/5v;
	string controlled from A1; pot power from gnd/3.3v, center to A2
	
	Uses: FastLED, analogRead, map, setBrightness, rotary BCD to switch/case mode,
	binary LED output, I/O pin arrays, bitWrite/Read, digitalRead/Write,
	EVERY_N_MILLISECONDS(tInt) for timed event (FastLED lib fx)

FastRainbo1 - 160 -- rainbow color shift w/ one lite and many

Gyro_Accel
  FRC anal. Gyro & _345 Accel devices code combined; first calibrate in their own sketch
 displays Temp and Angle on LCD and Ser. Mon., accel on Ser. Mon.
  Uses: (I2Cdev) and ADXL345 accelerometer class libs, LiqCrystal lib, reZeroing fx

GyroADWa
 * Connect FRC ADW22307 Gyro analog output to some Analog Pin, Temp output pin to another 
 *  integrate gyro angle over time to get a current angle, read Temp deg C, display both on LCD
     Uses: LCD, anal read, reZero (manual, needs work to make auto), expon MA, print @ interval

I2Cscanner - v. 2 puts code in setup, easier to use
    tests the standard 7-bit addresses 0-127 for valid device(s)
  Uses: Wire lib and basic commands
  
JF sloMO Frame
  faux slow motion strobing frame; pulses magnet and lites @ offset freq.

Key Grab v0.2
  Displays the currently pressed button on the DFR 16x2 LCD screen with 5 readable keys, 
  I  made custom .cpp for my panel' s analog button vals
  Uses Liq Crystal, LCD_DFR libraries, using variable from .cpp processing

LCDkey1602swit/case
     tuned for my board, get anal values from 5 keys on 1602 LCD with keypad and do things 
     with them; no need for DFR library; need to tune for each board anal values, make sensible
     labels for buttons
    Uses: LiquidCrystal lib, switch/ case
      
Leo2 -- some Leo code to send Joy data to dashbd; not sure needed now or ever

LIFA base -- old code for LV to Ardu -- never worked well, superceded by LINX

Morse Tone Rand 1/tabbed, from Monk's sketch 5-05 morse reader,  I modified to play tone;
  enter char string into serial monitor, plays tone and led flashes; tabs show functions separately
  Uses: char string array, for loop, random with seed, making char string from ascii input, tone output
  
Morse Tone Rand 2, from above, added serial print of word, simplified random generation

Morse Tone Rand3 added pot control of speed, minor improvement

MotoKnobServMod, Mini, Nano // Originally controlled servo position using a potentiometer 
     by Michal Rinott <http://people.interaction-ivrea.it/m.rinott>
    Mead's mod to control a motor speed within narrow range set by values in map function
    for motor that takes servo type pulse width to set speed and direction; Mini mod has code
    for 2 channels, later v. used in my 2 motor controller
    Uses servo lib, map anal volt to servo angle (speed), expon MA
    
MotoKnobServoNanoB --  
  mod for 2 channel Nano control box uses Anal pins for ground/5v of pot;  
  This modB has L channel normal pot action -- middle is off, 0 is full CCW, 1024 is full CW; 
  changed R channel to one direction, CCW, so 0 is 1500 ms, full on (1024) is 544 -- 
  should enable finer control of speed; used with 2 jags for team season '17 testing

mousePS2.txt -- code Nikola found, may work w/ PS2 mouse, never tried

My Blink mods1-3
 Turn on an LED for (blinkDelay), then off for (blinkDelay) repeatedly.
 I modified to accept input from serial monitor and show what's running
 Mod2 adds EEPROM persistent storage of delay value between restarts
  Uses Serial.parseInt to make int from char input, EEPROM to store value 
  between resets, clears EEPROM for initial format, or prn
   nano mod3 for AR input from pot to adj rate
    
On Off with Anal Pin, used as digital input to turn LED on / off
    Uses inputPullup, digitalRead, constant
    mod2 uses boolean var, 2 in/outs
    
ParadeBotLED
   series of mods build up control of LEDs that change pattern/color with motor direction; orig 
   code very faulty; AMrevs fix problems and greatly simplify and explain pattern logic
   
progmem Exercises  -- various trials of ways to store large # of strings or data in PROGMEM
  rather than SRAM when processing; F() macro, and PGM_P ptrs -- obscure syntax & concepts. 
  bkgnd info -- /Volumes/HD-3-data/Reference Library/Electronic-commun-device-media/
  Electronic Circuits&Devices/MakingTTerrata.txt
  
RCpulSense, pulSensePulseIn  -- mod  from  cookbook text
// Code Example 1-3 Using an Interrupt pin to capture an R/C pulse length
// mead mod for 16x2 lcd display, different LED output pin, etc
// Connect signal from R/C receiver into Ardu's digital pin 2/3
// Turn On R/C transmitter
// If valid signal is received, you should see the LED on pin x turn On.
// If no valid signal is received, you will see the LED turned Off.
// Uses: LiqCrystal display, interrupt or (12-3) pulseIn fx to capture w/o interrupt

ReadAnalogCalMap --  (moving) averages analog pin input, 0-5 v. (as from batt
  discharger board with an op-amp reading 12 v batt) --  maps that to the 
  actual v. 11.6-13 being sampled; prints raw pin and calcul. voltage
  if it's changed; use to get V map params for other sketches.
    
ReadAnalCurrMap - prints averaged analog pin reading when it changes; 
    from this calculates current across R-curr; if calib wrong, can find new params
    to use for map function.  Reads an analog input on pin X, and prints the result
    to the serial monitor if it has changed; uses mapping values to map pin AR to
    actual current (voltage/ 2 ohm) going to op-ampA. Use to calib mA before loading
    voltageSamplerB6 to Ardu then Proc2 app SerStringRead6 to graph dc chart. 
    based
    Uses: analRead, expon moving averag, map, round
        
ReadAnalogVaverage_3 -- averages (same) analog input to 3 pins X Y Z, and prints the result to 
    the serial monitor if it has changed.
    Used to calibrate and check op amp I/O params, compare accuracy of different AR pins
    based on: ReadAnalogVaverage - but using (same) voltage to 3 pins; 
    and here we're finding the multiplier for the op-amp part of batt discharger

ReadAnalogVaverage_Dig -  reads an averaged analog input on pin X, and prints the result 0-5000mV
    (+ ser. mon. + lcd if present) if it has changed.  Attach the center pin of a potentiometer 
    to PinIn, and the outside pins to +5V and ground; or any analog source. 
    Also takes one hi/lo input to D3 and LED displays on/off from D8 -- used to test anal and dig
    IR sensors et. al.
    Uses: Liquid Crystal lcd, round, expon moving avg, flt to int cast, map
    
ReadAnalogVavg_Dig1602 -- reads an averaged analog input on pin X, and prints the result 
  0-5000mV (+/- ser. mon. +/- lcd if present) if it has changed. Attach the center pin of a 
  potentiometer to PinIn, and the outside pins to +5V and ground, or any analog input.
  Uncomment key stuff to use keys.
  Also takes one hi/lo input to D3 and LED displays on/off from D11. Like ReadAnalVavgDig, 
  modif for 16x2 display
  Uses: Liquid Crystal libr, 16x2 display, DFR keypad libr, reading key value

  Read_Dig_to_Lite -  reads one hi/lo input to D4 and LED displays on/off at D12 
  -- used to test dig IR sensors et. al. Like On/OffwAnalPin above
    Uses: device power from pins
    
ReadPoToPWM_A --  reads an analog input on pin A4, converts it to voltage, 
    and prints the result to the serial monitor if changed; sends scaled PWM 
    to digital pin. Attach the center pin of a potentiometer to pin A4, and the 
    outside pins to +3.3V and ground.
    Uses: constant var, static, PWM output using analogWrite
    
ReadPoToPWM_B -- reads analog input on pin 0, converts it to voltage,
  proportional PWM output, and prints the result to the serial monitor 
  when it changes. Very basic, could be improved with MA of voltage, 
  rounding, faster loop.  Attach the center pin of a potentiometer to
  pin A0, and the outside pins to +5V and ground.
  
    Uses: float, cast to byte, PWM output with analogWrite

ReadSerialIntB -- takes mixed char input from keybd, extracts 1st int, 
 converts from C to F temp; orig used Serial.parseInt which is weak at
 parsing int mixed with other chars, so ReadSerIntB puts incoming digits
 into a String object then str.toInt() to convert.
  
  Uses: Serial.readBytes, atoi, isDigit, strlen, isDigit, memset

ReadSerialIntC -- takes mixed char input from keybd, extracts 1st int,
  converts from C to F temp; orig used Serial.parseInt which is weak at
  parsing int mixed with other chars, so ReadSerIntB puts incoming
  digits into a String object then Str.toInt() to convert. This v. C
  puts input bytes into char array, extracts first group of digits
  from it into another array then uses atoi (or conv to String then
  .toInt) to make the int; reinit or memset clears array each loop;
  handles neg # input OK, may need to limit input to 9 char

  Uses: Ser.readBytes, atoi, isDigit, strlen, memset, string.toInt, strcpy
  
RGB Calibration test -- for Neopixel LED sets
// Use this sketch to determine RGB ordering for your chipset

SampleSyntax -- code examples of many kinds

SendBinary, major mod from orig Cookbook ch4r6 which was badly flawed
   for printing to ser. monitor, but may have worked for other devices that expect char
   over serial.  Sends a header followed by two random integer values as binary data.
   Uses: random, lowByte, highByte, Serial.write, BIN format

Sensor Reader0/4 from Igoe MTT,ch.2,proj.2, added if block for handshaking w/ Proc.
 Context: Arduino -- later mods prep for sending batt dc readings to Proc
 Reads two analog inputs and two digital inputs and prints their values to ser. 
 mon. or ser. port -- to control pong game in Processing. Type any char+ret to
 trigger printing a string of sensor values, or send any byte from Proc.
 Connections: analog sensor(s) on 2 analog input pins (or pot simulates them)
 2 momentary switches on digital I/O pins

Serial Input 2 LCD -- to get serial data from Proc, print to LCD -- ? if ever worked right

SerialParseInt 
  // uses .parseInt to read # from Ser. Mon., handles minus temps, not mixed char
 // v. ReadSerialIntB/C for more  soln

serialReadWriteAM1 -- AM revision of PY's for Ardu <-> SmartDesktop comm;
    digi and anal inputs & reading ser bool input to display; my 2nd version added 
    code for strcat of float var; many questions about array use here
    Uses: char/string array, boolean input/output, Serial.readBytes
    dtostrf (vFlt,4,3,vStr) converts float to string,
    sprintf(tempstr,"%s;",vStr);   // put string into buffer
    strcat(out,tempstr)  // add buffer string to array
    
SerialReadWriteAM2   -- AM 2nd revision of PY's for Ardu <-> SmartDesktop comm
   v.2 adds float output & Streaming lib to print C++ style using insertions;
   reads digital and analog pin values, prints to serial output
   Uses: Streaming lib, boolean I/O,  strcat, sprintf, dtostrf, Serial.readBytes
   ? still have questions about what char arrays actually contain after strcat, sprintf

serialReadWriteAM3 -- AM 3rd revision of PY's for Ardu <-> SmartDesktop comm;
    digi & anal inputs & reading ser bool input to control leds; uses readBytes()
    to put full input string into char[], then for loop to read it, turn lites on/off
    my v. 2 added code for strcat of float var;  
    v. 3 tests various ways to re-init/clear the 'out' array each loop
    Uses: char/string array, boolean input/output, Serial.readBytes
    dtostrf (vFlt,4,3,vStr) convert float to string,
    sprintf(tempstr,"%s",vStr);   // put numbers / string into ch array buffer
    same for number to str: sprintf(tempstr,"%d", someInt);
    strcat(out,tempstr)          // add buffer string to array
       
SeriPrintWrite -- to show output of ser.mon. using .write vs .print for a byte argument; 
      both show same char output in ser. mon. when the argument is a string;
      .write probably sends binary to serial port, but hard to see with ser.mon. or terminal
     as they both show the binary input as char's
      Uses: serial.write, serial.print

Servo Mega tx rx BT -- Mega w/ BT/BTE? module, send / recv bytes
   over BT to prog like Proc on PC, can view Ardu's input w/ ser. mon.

  Proc app  --> sends control bytes via BT to Ardu for servo; first got
  a byte for up/down to increment tilt var; Proc. can use joystick button
  2 simul. key stroke, like sketch mega Servo Tx Rx BT; could try get
  an int from a GUI slider or joystick on Proc

  Uses: BT mod on ser2 read/write bytes, servo.write, elapsedMillis for
  timed print, later: convert incoming data to int angle for servo
  
Servo Mega tx rx Serial -- send / recv bytes over USB-TTL serial
    to prog like Proc on PC, can view Ardu's I/O w/ ser. mon.

  Proc app  --> sends control bytes via dongle on Ser2 of Mega for
  servo; first got a byte for up/down to increment tilt var;
  Proc. w/ GCP lib can use joystick button & axes to send ch or #
  to Ardu sketch mega Servo Tx Rx Ser or BT; GC gui lib can also
  sent  an int from a slider on Proc; Ardu converts chars and #'s to
  angle change for servos. code started for tilt & pan, vals read OK

  Uses: USB-TTL dongle on ser2, read/write bytes, servo.write,
  elapsedMillis for timed print, convert incoming data to change angle
  for servo

SFM Beest Comm 1  -- 2 motor strandbeest control from iOS/Andr Simb app
   Red Spark board hard wired to control, so this is code being used
  v. 0.1 mods of SFM RoomComm for dual motor control from 6 simblee pins,
  read batt V on one analog pin

  Code here is uploaded to Simblee board to control 2 motors.
  Simblee phone app (iOS / Android) makes BLE connection to the Simblee,
  with the app displaying the user interface created here to send
  motor controller commands. To operate, power up Beast & Simblee board,
  open app, connect to board, press Power square, then drive or other. 
  Stop square stops any action; Power down just blocks drive code

  Uses: deviceName, advertData, drawText, drawTextField, drawImage,
  drawSlider, [Serial.printf], screenWidth, update(), setEvent
  for various inputs, [parent RooComm used xxd util to load images as 
  .h file], drawText, _Rect, _Slider, byte constants in lib for image
  id's, sprintf to convert vars to # and text into displayable string,
  analog read motor power batt V on pin 6 -- display in data field
  
SFM Color Wheel B -- adapted from SFM/Color Wheel example
  version B added stepper control, sending bytes to other device
  
  Uses: deviceName, advertData, drawText, drawTextField, drawImage,
  drawSlider, Serial.printf, screenWidth, update(), color_wheel, setEvent
  for color press, volatile var (changed in event thread),
  serial.write(byte array,len)
  
Simblee examples from RFduino deep in:
   ~/Library/Arduino15/packages/Simblee/hardware/Simblee/1.1.4/libraries
  -- show when Simb. board selected in Tools

SFM Color Wheel B -- adapted from SFM/Color Wheel example
  version B added stepper control, sending bytes to other device

  Code here is uploaded to Simblee board that can be freestanding w/ (batt
  power) or USB powered to keep Serial comm to Ardu's IDE Ser Mon for
  debugging or whatever. Board's Serial could also comm to / from
  another serial device like Mega (v.i.).
  For wireless comm to whatever Simblee's Serial is connected to -- Simblee
  phone app (iOS / Android) makes BLE connection to the Simblee, with the
  app displaying the user interface created here. For this sketch:

  Uses: deviceName, advertData, drawText, drawTextField, drawImage,
  drawSlider, Serial.printf, screenWidth, update(), color_wheel, setEvent
  for color press, volatile var (changed in event thread),
  serial.write(byte array,len)

Sibl Low Power example: uses SFM lib but just does local, board
   actions, nothing sent or recvd from mobile app. Some delay code
   imported from SFM buttonLEDdemo

   Uses: SFM.txPowerLevel, various pinWake callbacks, ULPdelay,
   pinWakeReset, delay until button,

Simb PinWake Demo shows plain wake and wake w/ specific callback
  adapted from Simb NonBLE/PinWake example

  Uses: specific callback fx, pinwake setups, ULPdelay call in loop and
  different LED response to plain wake and callback wake from different
  pins using pinWoke() conditionals,  Serial.printf, resetPinWake
  
SFM_Read_Input  -- display a Simblee board input on smart phone app

SFM RoomComm0_  -- BLE4 Roomba control from iOS/Andr

    v. 0.1 has images for ui and few trial controls
    v. 0.2 adds libs for byte constants, links screen events
    to commands: some control of power, drive, stop, brush, clean
    v 0.3 fused bottom images into bottom3, add STOP txt, made fast turns
    slower, add field for sensor data (not filled yet)
    v 0.4 adds sensor reading, display some data to text field,Red,Lily vers
    v 0.5 minor mods for Red and Lily bds, now readBytes for sensor read

  Code here is uploaded to Simblee board for Serial comm w/ Roomba port.
  Simblee phone app (iOS / Android) makes BLE connection to the Simblee,
  with the app displaying the user interface created here to control &
  see sensor data on the R. To operate, Enable R by grnding DD wire or button,
  open app, connect to Simb, press Power square, then drive or other. Stop
  square stops anything; Reds: always Power Down with Power square. Grays
  can disable w/ button.
  To see params while charging, power up then down w/ Power sq.

  Uses: deviceName, advertData, drawText, drawTextField, drawImage,
  drawSlider, Serial.printf, screenWidth, update(), setEvent
  for various inputs, volatile var (changed in event thread), xxd util to
  load .h images, serial.write(byte array,len), drawText, _Rect, _Slider
  byte constants in lib, sprintf to make # and text into displayable string,
  enhanced if (ternary operator) to adjust turn speed, serial readBytes
   
SFM Ser Volt Read ==>  Ardu reads voltage on some pin, sends string
  message about voltage over serial (softwareSerial 2nd port for Uno)
  every 2 seconds to the Simb bd rx pin; this SFM code sends text to app
  Ardu test sketch: AnalogReadSerialPrintBT, actual use would run Voltage
  Sampler V_ w/ software serial added
  
  Uses: updateText, drawText, memset to clear array, readBytes to
  fill array from serial input,
  
SFM temp read demonstrates how to make a Bluetooth Low Energy 4
  Advertisement connection with the Simblee, then see its CPU temp
  updates 2x / second on the SimbleeForMobile phone app.

 Uses: subdomain for cache, float print, updateText, updateRect, remote
 deviceType, setVisible
 
SiblDigitalReadLED -- non BLE, board test of button controlling LED
 Reads digital input on pin 3 (of Spark BOB), prints to the serial monitor 


SR04+VL53L LCD uno uses polo's code vl53l0x_ContinuousRanging TOF
  (on adafrut board) + SR04 US module for demo of 2 rangefinders 
  on 1 LCD display
  Uses: polo vl53lox lib, elapsedMillis, liquidCrystal, wire lib,
  expon MA
  
SumoShield_Code  -- Solarbotics code from Allan? never used by me

SzilardLED -- various mods to color strings according to camera object detection?

theme.txt -- finer control of editor appearance, in app/contents/resources/java/lib/theme/ or prog folder in Win32

Toner test -- simple toner on/off to test device

turret_and_interruptA  -- derived from miller's code, for control of turret with detector switch
   Revision A, putting debounce in Interrupts, probably faulty ISRs (local time var no good)
  CW switch should go to pin 2, CCW switch to pin 3
  
turret_and_interruptB, adapted for LCD display of want, now= positions
  Revision A put debounced Interrupts, but used faulty ISR variables.
  CW switch should go to pin 2, CCW switch to pin 3
  Uses: Servo, Liq Crystal lib, interrupt, debounce, map, 8x2 display
  
turret_and_interruptC, minor changes, slower redraws of display;
  Revision A, put debounce in Interrupts, eliminating flag var, ISR on RISING, B added LCDisplay
  CW switch should go to pin 2, CCW switch to pin 3

TB B Gone  -- shut off nearby TV using IR code library
 Mead mod 1610 cleaned up code, added explanations & questions, ~ interrupts and much
 else. v. B cleans up further by putting long fx in tabs, slimming codes to just NA, etc
 Uses: progmem data storage, special code lib, sleep lib, special timing fx

UltrasonicDisplay2LCD
 adapt from ReadAnalogVaverage - averages analog input on pin, 
 voltage or some mapped value, display to LCD
 Attach the center pin of pot to PinIn, and the outside pins to +5V and ground,
 -- here I use adjacent anal pins to supply gnd and 5v.
 Uses: Liquid Crystal 8x2 display, map, analRead, expon moving average, round
 
US-SR04eleg -- orig code from Elegoo using their lib, not tried yet

USsr04 -- various US module: display on LCD, with MA's, key action, float display, etc

USsr04 avg Ser TX -- Ultrasonic distance --> LCD & send bytes over Serial
  display averaged distance to onboard LCD shield, send data via Serial to
  remote program like Proc SerialDataReadGraph
Uses: gets dist_avg using exp moving average, pulseIn,LCD display,.write
  bytes

USsr04_MaxBot Avg_LCD -- Ultrasonic module to 1602 LCD display
  display averaged distance to onboard LCD shield to compare SR04
  to MaxBot analog sensor, on one display
  Uses: gets dist_avg using exp moving average, pulseIn
  
VL6180interleaveContinuous -- laser rangefinder 1-20+ cm, also AmbientLightSense
  setup for Uno using I2C pins, display to 16x2 LCD
  Uses: LCD, wiring lib, <elapsedMillis.h> to print @ some interval
  
voltSampleDischarge -- monitor voltage only, without calib, using external resistance
  not tested yet

voltSamplerB1 -- monitor batt discharge, modif from VoltageSimpler12vC
  using while loop to check calib accuracy of measured voltage, then go
  to live recording of voltage vs. time, printing as needed. Calculations
  convert 0-5 v from diff. op-amps to actual ~11-13 v batt under test
  to get better accuracy than 5 mv / tick; determine bOffset from
  voltmeter on ref. volt, mult by trial and error?; no live update of params in code
  Uses: while loop with typed input conditions, while(bool) to hold action
  
VoltSamplerB2  modif from VoltageSimpler12vC, monitors batt discharge, using while loop,
   -- to convert 0-5 v from diff. op-amps to  source batt's ~11-13 v; setup gives calib option to
   enable tune up of map params; loop watches batt volt as it discharges, ser. prints values, more
   as it approaches target.
   Uses: constant, while loop with conditional typed input, calib of map params, expon moving 
   average, Serial.parseInt, while(bool) to pause action
   
voltageSamplerB3 -- modif from VoltageSamplerB2, adds curr readout
    and other refinements, do/while loop, function for value reading;
   -- converts 0-5 v from diff. op-amps to actual ~11-13 v from batt source
    and Rcurr drop to current draw; calib phase for V in setup; C params
    come from previous calib
    
voltageSamplerB4, modified VoltageSamplerB3, adds live LCD display; 
    B2-3 adds curr readout and other refinements, do/while loop, function for value reading;
   -- converts 0-5 v from diff. op-amps to actual ~11.5-13 v from batt source
    and Rcurr drop to current draw; calib phase for V in setup; Curr params
    come from previous calib sketch; ~ 2 mV resolution; added extended dc phase to go < 12.5
    
voltageSamplerB5 -- modif from VoltageSamplerB4: just reads batt V, record deeper disch;
   -- converts 0-5 v from diff. op-amps to actual 11.5-13 v from batt source using map;
  calib phase for V in setup; no Curr monitoring here;
  Uses: LCD, map, expon moving avg, do/while, tone

VoltageSamplerB6, modif of VoltageSamplerB4 for serial output to Proc sketch
  -- just the numbers for min,mV,mA
  -- converts 0-5 v from diff. op-amps to read ~11.5-13 v from batt source
  and Rcurr drop to current draw; calib phase for V in setup; Curr map params
  come from previous calib sketch -- do that first with current Rc and load Rl
  being used
 
voltageSimpler12v -- pre-op-amp attempt to monitor batt discharge, using while loop;
   mod to read 0-5 v diff of batt v to regulated 8 v. rather than using volt divider
   now calibrates mult first if voltRegul = 0; much improved in later Sampler versions;
   ~ 5 mV resolution

voltageSimplerNiCd -- monitor batt discharge of 8 cell NiCd, using while loop
   modified to read 0-5 v diff of batt v to regulated 8 v. rather than using volt divider
   now calibrates mult first if voltRegul = 0, also calib offset -- early attempt, pre-op-amp

voltageSimplerNiMh to monitor batt discharge, using while loop;
 makes beep when target V reached using external discharge circuit
   